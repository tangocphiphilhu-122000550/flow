const axios = require('axios');
const fs = require('fs').promises;
const chalk = require('chalk'); // S·ª≠ d·ª•ng chalk@4.1.2
const jwt = require('jsonwebtoken'); // Th√™m th∆∞ vi·ªán jsonwebtoken ƒë·ªÉ gi·∫£i m√£ JWT
const readline = require('readline'); // Th√™m th∆∞ vi·ªán ƒë·ªÉ ƒë·ªçc input t·ª´ ng∆∞·ªùi d√πng

// T·∫°o giao di·ªán ƒë·ªÉ ƒë·ªçc input t·ª´ ng∆∞·ªùi d√πng
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

// Bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i t·∫°m d·ª´ng do l·ªói 429
let isPausedDueToRateLimit = false;
let pauseUntil = 0;

// H√†m delay (ƒë·ªÉ ch·ªù tr∆∞·ªõc khi retry ho·∫∑c gi·ªØa c√°c y√™u c·∫ßu)
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

// H√†m gi·∫£i m√£ accessToken ƒë·ªÉ l·∫•y email
function decodeAccessToken(accessToken) {
  try {
    const decoded = jwt.decode(accessToken);
    return decoded ? decoded.email : 'Kh√¥ng x√°c ƒë·ªãnh';
  } catch (error) {
    console.error(chalk.red('‚ùå L·ªói khi gi·∫£i m√£ accessToken:'), error.message);
    return 'Kh√¥ng x√°c ƒë·ªãnh';
  }
}

// H√†m ƒë·ªçc accessToken t·ª´ file data.txt
async function readAccessTokens() {
  try {
    const data = await fs.readFile('data.txt', 'utf8');
    return data
      .split('\n')
      .map((line) => line.trim())
      .filter((line) => line);
  } catch (error) {
    console.error(chalk.red('‚ùå L·ªói khi ƒë·ªçc file data.txt:'), error.message);
    return [];
  }
}

// H√†m ƒë·ªçc refreshToken t·ª´ file refeshtokens.txt
async function readRefreshTokens() {
  try {
    const data = await fs.readFile('refeshtokens.txt', 'utf8');
    return data
      .split('\n')
      .map((line) => line.trim())
      .filter((line) => line);
  } catch (error) {
    console.error(chalk.red('‚ùå L·ªói khi ƒë·ªçc file refeshtokens.txt:'), error.message);
    return [];
  }
}

// H√†m ƒë·ªãnh d·∫°ng th·ªùi gian th√†nh chu·ªói ng√†y gi·ªù (theo th·ªùi gian h·ªá th·ªëng)
function formatDateTime(timestamp) {
  const date = new Date(timestamp);
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');
  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
}

// H√†m chuy·ªÉn chu·ªói ng√†y gi·ªù th√†nh timestamp (theo th·ªùi gian h·ªá th·ªëng)
function parseDateTime(dateTimeStr) {
  const date = new Date(dateTimeStr);
  return date.getTime();
}

// H√†m ƒë·ªçc th·ªùi gian ƒëi·ªÉm danh cu·ªëi c√πng t·ª´ file lastCheckIn.txt
async function readLastCheckIn() {
  try {
    const data = await fs.readFile('lastCheckIn.txt', 'utf8');
    const checkInMap = {};
    data
      .split('\n')
      .map((line) => line.trim())
      .filter((line) => line)
      .forEach((line) => {
        const [email, dateTimeStr] = line.split('|');
        // Chuy·ªÉn chu·ªói ng√†y gi·ªù th√†nh timestamp
        const timestamp = parseDateTime(dateTimeStr);
        checkInMap[email] = timestamp;
      });
    return checkInMap;
  } catch (error) {
    // N·∫øu file kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói, tr·∫£ v·ªÅ object r·ªóng
    return {};
  }
}

// H√†m l∆∞u th·ªùi gian ƒëi·ªÉm danh v√†o file lastCheckIn.txt
async function saveLastCheckIn(checkInMap) {
  const data = Object.entries(checkInMap)
    .map(([email, timestamp]) => `${email}|${formatDateTime(timestamp)}`)
    .join('\n');
  await fs.writeFile('lastCheckIn.txt', data);
}

// H√†m ƒë·ªçc danh s√°ch nhi·ªám v·ª• ƒë√£ ho√†n th√†nh t·ª´ file completedTasks.txt
async function readCompletedTasks() {
  try {
    const data = await fs.readFile('completedTasks.txt', 'utf8');
    const completedTasks = new Set();
    data
      .split('\n')
      .map((line) => line.trim())
      .filter((line) => line)
      .forEach((line) => {
        const [email, taskId] = line.split('|');
        completedTasks.add(`${email}|${taskId}`);
      });
    return completedTasks;
  } catch (error) {
    // N·∫øu file kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói, tr·∫£ v·ªÅ Set r·ªóng
    return new Set();
  }
}

// H√†m l∆∞u nhi·ªám v·ª• ƒë√£ ho√†n th√†nh v√†o file completedTasks.txt
async function saveCompletedTask(email, taskId, taskName, completedTasks) {
  completedTasks.add(`${email}|${taskId}`);
  const data = Array.from(completedTasks)
    .map((task) => {
      const [taskEmail, taskId] = task.split('|');
      return `${taskEmail}|${taskId}|${taskName}`; // L∆∞u c·∫£ taskName ƒë·ªÉ d·ªÖ ƒë·ªçc
    })
    .join('\n');
  await fs.writeFile('completedTasks.txt', data);
}

// H√†m ki·ªÉm tra xem ƒë√£ ƒëi·ªÉm danh trong ng√†y ch∆∞a
function hasCheckedInToday(lastCheckInTimestamp) {
  if (!lastCheckInTimestamp) return false;

  const lastCheckInDate = new Date(lastCheckInTimestamp);
  const currentDate = new Date();

  // So s√°nh ng√†y, th√°ng, nƒÉm
  return (
    lastCheckInDate.getDate() === currentDate.getDate() &&
    lastCheckInDate.getMonth() === currentDate.getMonth() &&
    lastCheckInDate.getFullYear() === currentDate.getFullYear()
  );
}

// H√†m ki·ªÉm tra xem ƒë√£ ƒë·ªß 24 gi·ªù k·ªÉ t·ª´ l·∫ßn ƒëi·ªÉm danh cu·ªëi c√πng ch∆∞a
function hasWaited24Hours(lastCheckInTimestamp) {
  if (!lastCheckInTimestamp) return true; // N·∫øu ch∆∞a c√≥ l·∫ßn ƒëi·ªÉm danh n√†o, cho ph√©p

  const lastCheckInDate = new Date(lastCheckInTimestamp);
  const currentDate = new Date();
  const timeDiff = currentDate - lastCheckInDate; // Th·ªùi gian ch√™nh l·ªách (ms)
  const hoursDiff = timeDiff / (1000 * 60 * 60); // Chuy·ªÉn sang gi·ªù

  return hoursDiff >= 24; // ƒê√£ ƒë·ªß 24 gi·ªù ch∆∞a
}

// H√†m l∆∞u accessToken v√†o file data.txt
async function saveAccessTokens(accessTokens) {
  const data = accessTokens.join('\n');
  await fs.writeFile('data.txt', data);
}

// H√†m l∆∞u refreshToken v√†o file refeshtokens.txt
async function saveRefreshTokens(refreshTokens) {
  const data = refreshTokens.join('\n');
  await fs.writeFile('refeshtokens.txt', data);
}

// H√†m th·ª±c hi·ªán y√™u c·∫ßu HTTP v·ªõi c∆° ch·∫ø th·ª≠ l·∫°i khi g·∫∑p l·ªói 502 ho·∫∑c 429
async function makeRequestWithRetry(config, retries = 5, delayMs = 5000) {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      const response = await axios(config);
      return response;
    } catch (error) {
      if (error.response && error.response.status === 502) {
        if (attempt === retries) {
          throw new Error(`H·∫øt s·ªë l·∫ßn th·ª≠ (${retries}) - L·ªói 502 Bad Gateway`);
        }
        console.log(chalk.yellow(`‚ö†Ô∏è L·ªói 502 Bad Gateway (Th·ª≠ ${attempt}/${retries}). Th·ª≠ l·∫°i sau ${delayMs / 1000} gi√¢y...`));
        await delay(delayMs);
      } else if (error.response && error.response.status === 429) {
        const retryAfter = error.response.headers['retry-after']
          ? parseInt(error.response.headers['retry-after'], 10) * 1000
          : 60000; // M·∫∑c ƒë·ªãnh ch·ªù 60 gi√¢y n·∫øu kh√¥ng c√≥ Retry-After
        console.log(chalk.yellow(`‚ö†Ô∏è L·ªói 429 Too Many Requests. T·∫°m d·ª´ng to√†n b·ªô x·ª≠ l√Ω trong ${retryAfter / 1000} gi√¢y...`));
        
        // T·∫°m d·ª´ng to√†n b·ªô x·ª≠ l√Ω
        isPausedDueToRateLimit = true;
        pauseUntil = Date.now() + retryAfter;
        await delay(retryAfter);
        isPausedDueToRateLimit = false;
        
        if (attempt === retries) {
          throw new Error(`H·∫øt s·ªë l·∫ßn th·ª≠ (${retries}) - L·ªói 429 Too Many Requests`);
        }
        console.log(chalk.cyan(`üîÑ Ti·∫øp t·ª•c th·ª≠ l·∫°i y√™u c·∫ßu (Th·ª≠ ${attempt}/${retries})...`));
      } else {
        throw error; // N√©m l·ªói n·∫øu kh√¥ng ph·∫£i 502 ho·∫∑c 429
      }
    }
  }
}

// H√†m ki·ªÉm tra AccessToken c√≥ h·ª£p l·ªá kh√¥ng b·∫±ng c√°ch g·ªçi API get-earn-stats
async function checkAccessTokenValidity(accessToken) {
  try {
    await makeRequestWithRetry({
      method: 'get',
      url: 'https://api2.flow3.tech/api/user/get-earn-stats',
      headers: {
        Authorization: `Bearer ${accessToken}`,
        accept: 'application/json, text/plain, */*',
        'accept-language': 'vi,fr-FR;q=0.9,fr;q=0.8,en-US;q=0.7,en;q=0.6',
        'sec-ch-ua': '"Not(A:Brand";v="99", "Google Chrome";v="133", "Chromium";v="133"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-site',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36',
        origin: 'https://app.flow3.tech',
        referer: 'https://app.flow3.tech/',
      },
    });
    return true; // Token h·ª£p l·ªá
  } catch (error) {
    if (error.response?.status === 401) {
      return false; // Token h·∫øt h·∫°n
    }
    throw error; // L·ªói kh√°c
  }
}

// H√†m l√†m m·ªõi accessToken b·∫±ng refreshToken v√† accessToken c≈©
async function refreshAccessToken(oldAccessToken, refreshToken) {
  if (!oldAccessToken || oldAccessToken === 'undefined' || !refreshToken || refreshToken === 'undefined') {
    throw new Error('AccessToken ho·∫∑c refreshToken kh√¥ng h·ª£p l·ªá');
  }

  try {
    const response = await makeRequestWithRetry({
      method: 'post',
      url: 'https://api2.flow3.tech/api/user/refresh',
      data: { refreshToken },
      headers: {
        Authorization: `Bearer ${oldAccessToken}`,
        accept: 'application/json, text/plain, */*',
        'accept-language': 'vi,fr-FR;q=0.9,fr;q=0.8,en-US;q=0.7,en;q=0.6',
        'content-type': 'application/json',
        'sec-ch-ua': '"Not(A:Brand";v="99", "Google Chrome";v="133", "Chromium";v="133"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-site',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36',
        origin: 'https://app.flow3.tech',
        referer: 'https://app.flow3.tech/',
      },
    });

    const { accessToken, refreshToken: newRefreshToken } = response.data.data;
    return { accessToken, refreshToken: newRefreshToken || refreshToken };
  } catch (error) {
    throw error;
  }
}

// H√†m g·ªçi API l·∫•y danh s√°ch task ƒëi·ªÉm danh h·∫±ng ng√†y
async function getDailyCheckInTasks(accessToken) {
  try {
    const response = await makeRequestWithRetry({
      method: 'get',
      url: 'https://api2.flow3.tech/api/task/get-user-task-daily',
      headers: {
        Authorization: `Bearer ${accessToken}`,
        accept: 'application/json, text/plain, */*',
        'accept-language': 'vi,fr-FR;q=0.9,fr;q=0.8,en-US;q=0.7,en;q=0.6',
        'sec-ch-ua': '"Chromium";v="134", "Not:A-Brand";v="24", "Google Chrome";v="134"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-site',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36',
        origin: 'https://app.flow3.tech',
        referer: 'https://app.flow3.tech/',
      },
    });
    return response.data.data; // Tr·∫£ v·ªÅ m·∫£ng c√°c task ƒëi·ªÉm danh h·∫±ng ng√†y
  } catch (error) {
    throw error;
  }
}

// H√†m g·ªçi API th·ª±c hi·ªán ƒëi·ªÉm danh h·∫±ng ng√†y
async function performDailyCheckIn(accessToken, taskId) {
  try {
    const response = await makeRequestWithRetry({
      method: 'post',
      url: 'https://api2.flow3.tech/api/task/daily-check-in',
      data: { taskId },
      headers: {
        Authorization: `Bearer ${accessToken}`,
        accept: 'application/json, text/plain, */*',
        'accept-language': 'vi,fr-FR;q=0.9,fr;q=0.8,en-US;q=0.7,en;q=0.6',
        'content-type': 'application/json',
        'sec-ch-ua': '"Chromium";v="134", "Not:A-Brand";v="24", "Google Chrome";v="134"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-site',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36',
        origin: 'https://app.flow3.tech',
        referer: 'https://app.flow3.tech/',
      },
    });
    return response.data;
  } catch (error) {
    throw error;
  }
}

// H√†m x·ª≠ l√Ω ƒëi·ªÉm danh h·∫±ng ng√†y
async function checkInDaily(accessToken, email, checkInMap) {
  try {
    const lastCheckInTimestamp = checkInMap[email] || 0;

    if (hasCheckedInToday(lastCheckInTimestamp)) {
      console.log(chalk.gray(`‚è≥ T√†i kho·∫£n ${email}: Ch∆∞a ƒë·ªß 24 gi·ªù n√™n ch∆∞a th·ªÉ checkin, ƒë·ª£i l·∫ßn sau.`));
      return { status: 'success' }; // Tr·∫£ v·ªÅ tr·∫°ng th√°i th√†nh c√¥ng ƒë·ªÉ ti·∫øp t·ª•c x·ª≠ l√Ω
    }

    // L·∫•y danh s√°ch task ƒëi·ªÉm danh
    const dailyTasks = await getDailyCheckInTasks(accessToken);

    // Ki·ªÉm tra xem t·∫•t c·∫£ c√°c task ƒë√£ claimed ch∆∞a
    const allClaimed = dailyTasks.every((task) => task.status === 'claimed');
    if (allClaimed) {
      console.log(chalk.gray(`‚è≥ T√†i kho·∫£n ${email}: ƒê√£ ho√†n th√†nh t·∫•t c·∫£ c√°c ng√†y ƒëi·ªÉm danh.`));
      checkInMap[email] = Date.now();
      await saveLastCheckIn(checkInMap);
      return { status: 'success' };
    }

    // ƒê·∫øm s·ªë task ƒë√£ claimed ƒë·ªÉ x√°c ƒë·ªãnh task ti·∫øp theo
    let claimedCount = 0;
    for (const task of dailyTasks) {
      if (task.status === 'claimed') {
        claimedCount++;
      } else {
        break;
      }
    }

    // Task ti·∫øp theo l√† task t·∫°i v·ªã tr√≠ claimedCount
    const taskToCheckIn = dailyTasks[claimedCount];

    if (!taskToCheckIn) {
      console.log(chalk.red(`‚ùå T√†i kho·∫£n ${email}: Kh√¥ng t√¨m th·∫•y task ƒëi·ªÉm danh ph√π h·ª£p.`));
      return { status: 'error' };
    }

    // N·∫øu task ti·∫øp theo b·ªã kh√≥a
    if (taskToCheckIn.status === 'locked') {
      // Ki·ªÉm tra xem ƒë√£ ƒë·ªß 24 gi·ªù k·ªÉ t·ª´ l·∫ßn ƒëi·ªÉm danh cu·ªëi c√πng ch∆∞a
      if (!hasWaited24Hours(lastCheckInTimestamp)) {
        console.log(chalk.gray(`‚è≥ T√†i kho·∫£n ${email}: Ch∆∞a ƒë·ªß 24 gi·ªù n√™n ch∆∞a th·ªÉ checkin, ƒë·ª£i l·∫ßn sau.`));
        return { status: 'success' }; // Kh√¥ng l∆∞u th·ªùi gian, tr·∫£ v·ªÅ tr·∫°ng th√°i th√†nh c√¥ng
      }

      // N·∫øu ƒë√£ ƒë·ªß 24 gi·ªù nh∆∞ng task v·∫´n kh√≥a, ti·∫øp t·ª•c x·ª≠ l√Ω c√°c b∆∞·ªõc kh√°c
      console.log(
        chalk.yellow(
          `‚ö†Ô∏è T√†i kho·∫£n ${email}: ƒê√£ ƒë·ªß 24 gi·ªù nh∆∞ng ${taskToCheckIn.name} v·∫´n kh√≥a. S·∫Ω ki·ªÉm tra l·∫°i ·ªü v√≤ng l·∫∑p sau.`
        )
      );
      return { status: 'pending' }; // Tr·∫£ v·ªÅ tr·∫°ng th√°i pending ƒë·ªÉ b√°o r·∫±ng t√†i kho·∫£n n√†y c·∫ßn ki·ªÉm tra l·∫°i
    }

    // N·∫øu task kh√¥ng b·ªã kh√≥a, th·ª±c hi·ªán ƒëi·ªÉm danh
    const taskId = taskToCheckIn._id;
    const taskName = taskToCheckIn.name;
    console.log(chalk.cyan(`üîÑ ƒêang th·ª±c hi·ªán ƒëi·ªÉm danh: ${taskName}...`));

    try {
      // G·ªçi API ƒëi·ªÉm danh
      await performDailyCheckIn(accessToken, taskId);

      // G·ªçi l·∫°i API ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i task sau khi ƒëi·ªÉm danh
      const updatedTasks = await getDailyCheckInTasks(accessToken);
      const updatedTask = updatedTasks[claimedCount]; // Task t·∫°i v·ªã tr√≠ v·ª´a ƒëi·ªÉm danh

      if (!updatedTask || updatedTask.status === 'locked') {
        console.log(
          chalk.yellow(
            `‚ö†Ô∏è T√†i kho·∫£n ${email}: ƒêi·ªÉm danh ${taskName} th·∫•t b·∫°i - Task v·∫´n b·ªã kh√≥a. S·∫Ω ki·ªÉm tra l·∫°i ·ªü v√≤ng l·∫∑p sau.`
          )
        );
        return { status: 'pending' }; // Tr·∫£ v·ªÅ tr·∫°ng th√°i pending ƒë·ªÉ ki·ªÉm tra l·∫°i
      }

      if (updatedTask.status !== 'claimed') {
        console.log(
          chalk.red(
            `‚ùå T√†i kho·∫£n ${email}: ƒêi·ªÉm danh ${taskName} th·∫•t b·∫°i - Tr·∫°ng th√°i sau ƒëi·ªÉm danh l√† ${updatedTask.status}.`
          )
        );
        return { status: 'error' };
      }

      // N·∫øu tr·∫°ng th√°i l√† claimed, ƒëi·ªÉm danh th√†nh c√¥ng
      checkInMap[email] = Date.now();
      await saveLastCheckIn(checkInMap);
      console.log(chalk.green(`üìÖ T√†i kho·∫£n ${email}: ƒêi·ªÉm danh ${taskName} th√†nh c√¥ng!`));
      return { status: 'success' };
    } catch (error) {
      console.log(chalk.red(`‚ùå T√†i kho·∫£n ${email}: ƒêi·ªÉm danh ${taskName} th·∫•t b·∫°i - ${error.message}`));
      throw error;
    }
  } catch (error) {
    console.log(chalk.red(`‚ùå T√†i kho·∫£n ${email}: ƒêi·ªÉm danh h·∫±ng ng√†y th·∫•t b·∫°i - ${error.message}`));
    throw error; // N√©m l·ªói ƒë·ªÉ h√†m g·ªçi c√≥ th·ªÉ x·ª≠ l√Ω
  }
}

// H√†m g·ªçi API l·∫•y danh s√°ch nhi·ªám v·ª•
async function getUserTasks(accessToken) {
  try {
    const response = await makeRequestWithRetry({
      method: 'get',
      url: 'https://api2.flow3.tech/api/task/get-user-task',
      headers: {
        Authorization: `Bearer ${accessToken}`,
        accept: 'application/json, text/plain, */*',
        'accept-language': 'vi,fr-FR;q=0.9,fr;q=0.8,en-US;q=0.7,en;q=0.6',
        'sec-ch-ua': '"Chromium";v="134", "Not:A-Brand";v="24", "Google Chrome";v="134"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-site',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36',
        origin: 'https://app.flow3.tech',
        referer: 'https://app.flow3.tech/',
      },
    });
    return response.data.data;
  } catch (error) {
    throw error;
  }
}

// H√†m g·ªçi API th·ª±c hi·ªán nhi·ªám v·ª• (do-task)
async function doTask(accessToken, taskId) {
  try {
    const response = await makeRequestWithRetry({
      method: 'post',
      url: 'https://api2.flow3.tech/api/task/do-task',
      data: { taskId },
      headers: {
        Authorization: `Bearer ${accessToken}`,
        accept: 'application/json, text/plain, */*',
        'accept-language': 'vi,fr-FR;q=0.9,fr;q=0.8,en-US;q=0.7,en;q=0.6',
        'content-type': 'application/json',
        'sec-ch-ua': '"Chromium";v="134", "Not:A-Brand";v="24", "Google Chrome";v="134"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-site',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36',
        origin: 'https://app.flow3.tech',
        referer: 'https://app.flow3.tech/',
      },
    });
    return response.data;
  } catch (error) {
    throw error;
  }
}

// H√†m g·ªçi API claim ph·∫ßn th∆∞·ªüng nhi·ªám v·ª•
async function claimTask(accessToken, taskId) {
  try {
    const response = await makeRequestWithRetry({
      method: 'post',
      url: 'https://api2.flow3.tech/api/task/claim-task',
      data: { taskId },
      headers: {
        Authorization: `Bearer ${accessToken}`,
        accept: 'application/json, text/plain, */*',
        'accept-language': 'vi,fr-FR;q=0.9,fr;q=0.8,en Madonna:q=0.7,en:q=0.6',
        'content-type': 'application/json',
        'sec-ch-ua': '"Chromium";v="134", "Not:A-Brand";v="24", "Google Chrome";v="134"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-site',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36',
        origin: 'https://app.flow3.tech',
        referer: 'https://app.flow3.tech/',
      },
    });
    return response.data;
  } catch (error) {
    throw error;
  }
}

// H√†m th·ª±c hi·ªán t·∫•t c·∫£ c√°c nhi·ªám v·ª• cho m·ªôt t√†i kho·∫£n v√† tr·∫£ v·ªÅ tr·∫°ng th√°i c√≥ task hay kh√¥ng
async function performTasks(accessToken, email, completedTasks) {
  let hasTasks = false;

  try {
    let tasks = await getUserTasks(accessToken);

    for (const task of tasks) {
      const taskId = task._id;
      const taskName = task.name;
      const taskStatus = task.status;

      if (completedTasks.has(`${email}|${taskId}`) || taskStatus !== 'idle') {
        continue;
      }

      hasTasks = true;
      console.log(chalk.cyan(`üîÑ ƒêang th·ª±c hi·ªán nhi·ªám v·ª• "${taskName}"...`));

      try {
        await doTask(accessToken, taskId);

        tasks = await getUserTasks(accessToken);
        const updatedTask = tasks.find((t) => t._id === taskId);
        if (!updatedTask || updatedTask.status !== 'pending') {
          throw new Error(`Nhi·ªám v·ª• kh√¥ng chuy·ªÉn sang tr·∫°ng th√°i "pending".`);
        }

        await claimTask(accessToken, taskId);

        tasks = await getUserTasks(accessToken);
        const claimedTask = tasks.find((t) => t._id === taskId);
        if (!claimedTask || claimedTask.status !== 'claimed') {
          throw new Error(`Nhi·ªám v·ª• kh√¥ng chuy·ªÉn sang tr·∫°ng th√°i "claimed".`);
        }

        await saveCompletedTask(email, taskId, taskName, completedTasks);
        console.log(chalk.green(`‚úÖ Nhi·ªám v·ª• "${taskName}" ƒë√£ ho√†n th√†nh.`));
      } catch (error) {
        console.log(chalk.red(`‚ùå Nhi·ªám v·ª• "${taskName}" b·ªã l·ªói, b·ªè qua...`));
        continue;
      }

      await delay(2000);
    }
  } catch (error) {
    console.log(chalk.red(`‚ùå L·ªói khi l·∫•y danh s√°ch nhi·ªám v·ª• - ${error.message}`));
    throw error; // N√©m l·ªói ƒë·ªÉ h√†m g·ªçi c√≥ th·ªÉ x·ª≠ l√Ω
  }

  return hasTasks;
}

// H√†m g·ªçi API get-earn-stats ƒë·ªÉ l·∫•y th√¥ng tin ƒëi·ªÉm s·ªë
async function getEarnStats(accessToken) {
  try {
    const response = await makeRequestWithRetry({
      method: 'get',
      url: 'https://api2.flow3.tech/api/user/get-earn-stats',
      headers: {
        Authorization: `Bearer ${accessToken}`,
        accept: 'application/json, text/plain, */*',
        'accept-language': 'vi,fr-FR;q=0.9,fr;q=0.8,en-US;q=0.7,en;q=0.6',
        'sec-ch-ua': '"Not(A:Brand";v="99", "Google Chrome";v="133", "Chromium";v="133"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-site',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36',
        origin: 'https://app.flow3.tech',
        referer: 'https://app.flow3.tech/',
      },
    });
    return response.data.data;
  } catch (error) {
    throw error;
  }
}

// H√†m g·ªçi API get-connection-quality v√† get-earn-stats
async function checkConnectionQuality(
  index,
  accessTokens,
  refreshTokens,
  checkInMap,
  completedTasks
) {
  let accessToken = accessTokens[index];
  let refreshToken = refreshTokens[index];
  const email = decodeAccessToken(accessToken);

  if (!accessToken || accessToken === 'undefined' || !refreshToken || refreshToken === 'undefined') {
    console.log(chalk.red(`‚ùå T√†i kho·∫£n ${email}: Token kh√¥ng h·ª£p l·ªá. B·ªè qua...`));
    return { success: false, email };
  }

  // Ki·ªÉm tra AccessToken c√≥ h·ª£p l·ªá kh√¥ng tr∆∞·ªõc khi th·ª±c hi·ªán b·∫•t k·ª≥ thao t√°c n√†o
  let isTokenValid = false;
  try {
    isTokenValid = await checkAccessTokenValidity(accessToken);
  } catch (error) {
    if (error.message.includes('L·ªói 502 Bad Gateway')) {
      console.log(chalk.red(`‚ùå T√†i kho·∫£n ${email}: L·ªói 502 Bad Gateway sau nhi·ªÅu l·∫ßn th·ª≠. B·ªè qua...`));
      return { success: false, email };
    }
    throw error;
  }

  if (!isTokenValid) {
    console.log(chalk.yellow(`‚ö†Ô∏è T√†i kho·∫£n ${email}: AccessToken h·∫øt h·∫°n, ƒëang l√†m m·ªõi...`));
    try {
      const newTokens = await refreshAccessToken(accessToken, refreshToken);
      accessTokens[index] = newTokens.accessToken;
      refreshTokens[index] = newTokens.refreshToken;
      await saveAccessTokens(accessTokens);
      await saveRefreshTokens(refreshTokens);
      accessToken = newTokens.accessToken; // C·∫≠p nh·∫≠t accessToken m·ªõi
      console.log(chalk.green(`‚úÖ AccessToken ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi th√†nh c√¥ng cho t√†i kho·∫£n ${email}`));
    } catch (refreshError) {
      console.log(chalk.red(`‚ùå T√†i kho·∫£n ${email}: Kh√¥ng th·ªÉ l√†m m·ªõi token. B·ªè qua...`));
      return { success: false, email };
    }
  }

  // Sau khi ƒë·∫£m b·∫£o token h·ª£p l·ªá, ti·∫øp t·ª•c x·ª≠ l√Ω c√°c b∆∞·ªõc kh√°c
  try {
    // X·ª≠ l√Ω ƒëi·ªÉm danh h·∫±ng ng√†y
    const checkInResult = await checkInDaily(accessToken, email, checkInMap);

    // N·∫øu tr·∫°ng th√°i l√† error, b·ªè qua t√†i kho·∫£n
    if (checkInResult.status === 'error') {
      return { success: false, email };
    }

    // Ti·∫øp t·ª•c th·ª±c hi·ªán c√°c b∆∞·ªõc kh√°c ngay c·∫£ khi ƒëi·ªÉm danh ch∆∞a th√†nh c√¥ng
    const hasTasks = await performTasks(accessToken, email, completedTasks);

    const connectionResponse = await makeRequestWithRetry({
      method: 'get',
      url: 'https://api2.flow3.tech/api/user/get-connection-quality',
      headers: {
        Authorization: `Bearer ${accessToken}`,
        accept: 'application/json, text/plain, */*',
        'accept-language': 'vi,fr-FR;q=0.9,fr;q=0.8,en-US;q=0.7,en;q=0.6',
        'sec-ch-ua': '"Not(A:Brand";v="99", "Google Chrome";v="133", "Chromium";v="133"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-site',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36',
        origin: 'https://app.flow3.tech',
        referer: 'https://app.flow3.tech/',
      },
    });

    const earnStats = await getEarnStats(accessToken);

    if (!hasTasks) {
      console.log(chalk.green(`‚úÖ ƒê√£ ho√†n th√†nh t·∫•t c·∫£ task cho t√†i kho·∫£n n√†y`));
    }

    console.log(chalk.green(`‚úÖ T√†i kho·∫£n ${email}:`));
    console.log(chalk.green(`   - Ch·∫•t l∆∞·ª£ng k·∫øt n·ªëi: ${connectionResponse.data.data}`));
    console.log(chalk.green(`   - ƒêi·ªÉm h√¥m nay: ${earnStats.todayPointEarned}`));
    console.log(chalk.green(`   - T·ªïng ƒëi·ªÉm: ${earnStats.totalPointEarned}`));
    return { success: true, email };
  } catch (error) {
    if (error.message.includes('L·ªói 502 Bad Gateway')) {
      console.log(chalk.red(`‚ùå T√†i kho·∫£n ${email}: L·ªói 502 Bad Gateway sau nhi·ªÅu l·∫ßn th·ª≠. B·ªè qua...`));
      return { success: false, email };
    }
    console.log(chalk.red(`‚ùå T√†i kho·∫£n ${email}: L·ªói - ${error.message}`));
    return { success: false, email };
  }
}

// H√†m ch√≠nh ƒë·ªÉ ch·∫°y v√≤ng l·∫∑p qua c√°c token
async function runApiCalls() {
  let accessTokens = await readAccessTokens();
  let refreshTokens = await readRefreshTokens();
  let checkInMap = await readLastCheckIn();
  let completedTasks = await readCompletedTasks();

  if (accessTokens.length === 0 || refreshTokens.length === 0) {
    console.error(chalk.red('‚ùå Kh√¥ng t√¨m th·∫•y token trong file data.txt ho·∫∑c refeshtokens.txt'));
    rl.close();
    return;
  }

  if (accessTokens.length !== refreshTokens.length) {
    console.error(chalk.red('‚ùå S·ªë l∆∞·ª£ng accessToken v√† refreshToken kh√¥ng kh·ªõp'));
    rl.close();
    return;
  }

  // Hi·ªÉn th·ªã ti√™u ƒë·ªÅ ho√†nh tr√°ng
  console.log(chalk.magenta('üåüüåüüåü Phi Phi Airdrop Automation Tool üåüüåüüåü'));
  console.log(chalk.magenta('üöÄ ƒê∆∞·ª£c ph√°t tri·ªÉn b·ªüi Phi Phi - Chuy√™n gia t·ª± ƒë·ªông h√≥a h√†ng ƒë·∫ßu üöÄ'));
  console.log(chalk.magenta('üíª TƒÉng t·ªëc h√†nh tr√¨nh sƒÉn airdrop c·ªßa b·∫°n ngay h√¥m nay! üíª'));
  console.log(chalk.cyan('üöÄ B·∫Øt ƒë·∫ßu ch·∫°y ch∆∞∆°ng tr√¨nh...'));
  console.log(chalk.cyan(`üìä T·ªïng s·ªë t√†i kho·∫£n: ${accessTokens.length}`));

  let currentIndex = 0;
  let isProcessing = false;

  const processNextAccount = async () => {
    // Ki·ªÉm tra n·∫øu ch∆∞∆°ng tr√¨nh ƒëang b·ªã t·∫°m d·ª´ng do l·ªói 429
    if (isPausedDueToRateLimit) {
      const remainingTime = pauseUntil - Date.now();
      if (remainingTime > 0) {
        console.log(chalk.yellow(`‚è≥ ƒêang t·∫°m d·ª´ng do l·ªói 429, ch·ªù th√™m ${remainingTime / 1000} gi√¢y...`));
        await delay(remainingTime);
      }
      isPausedDueToRateLimit = false; // Ti·∫øp t·ª•c sau khi h·∫øt th·ªùi gian ch·ªù
    }

    if (isProcessing) return;
    isProcessing = true;

    const email = decodeAccessToken(accessTokens[currentIndex]);
    console.log(chalk.cyan(`---------------- ${email} -------------------`));
    console.log(chalk.cyan(`üîÑ ƒêang x·ª≠ l√Ω t√†i kho·∫£n: ${email}`));

    const result = await checkConnectionQuality(
      currentIndex,
      accessTokens,
      refreshTokens,
      checkInMap,
      completedTasks
    );

    if (!result.success) {
      console.log(chalk.gray(`‚è≠Ô∏è B·ªè qua t√†i kho·∫£n ${email}`));
    }

    currentIndex = (currentIndex + 1) % accessTokens.length;
    isProcessing = false;
  };

  // Th·ªùi gian ch·ªù gi·ªØa c√°c t√†i kho·∫£n
  setInterval(processNextAccount, 20000);
}

// Ch·∫°y ch∆∞∆°ng tr√¨nh
runApiCalls()
  .then(() => {
    // ƒê√≥ng giao di·ªán readline khi ho√†n t·∫•t
    rl.close();
  })
  .catch((error) => {
    console.error(chalk.red('‚ùå L·ªói trong ch∆∞∆°ng tr√¨nh:'), error.message);
    rl.close();
  });
