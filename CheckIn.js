const axios = require('axios');
const chalk = require('chalk'); // S·ª≠ d·ª•ng chalk@4.1.2 ƒë·ªÉ hi·ªÉn th·ªã m√†u s·∫Øc

// H√†m delay (ƒë·ªÉ ch·ªù n·∫øu c·∫ßn)
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

// AccessToken c·ªßa b·∫°n (thay th·∫ø b·∫±ng accessToken th·ª±c t·∫ø)
const accessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2ZiOGMzZWU5MGYwNTg0Y2ViNzAyNjQiLCJlbWFpbCI6InBoaXRhMTM0N0BnbWFpbC5jb20iLCJpYXQiOjE3NDQ2OTA3MDAsImV4cCI6MTc0NDY5NDMwMH0.AziLFEcbSwpvhIL0i4LpaFToytwzlDQ7JfpSGcjv1qg'; // Thay th·∫ø b·∫±ng accessToken c·ªßa b·∫°n

// H√†m th·ª±c hi·ªán y√™u c·∫ßu HTTP v·ªõi c∆° ch·∫ø th·ª≠ l·∫°i khi g·∫∑p l·ªói 502 ho·∫∑c 429
async function makeRequestWithRetry(config, retries = 3, delayMs = 2000) {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      const response = await axios(config);
      return response;
    } catch (error) {
      if (error.response && error.response.status === 502) {
        if (attempt === retries) {
          throw new Error(`H·∫øt s·ªë l·∫ßn th·ª≠ (${retries}) - L·ªói 502 Bad Gateway`);
        }
        console.log(chalk.yellow(`‚ö†Ô∏è L·ªói 502 Bad Gateway (Th·ª≠ ${attempt}/${retries}). Th·ª≠ l·∫°i sau ${delayMs / 1000} gi√¢y...`));
        await delay(delayMs);
      } else if (error.response && error.response.status === 429) {
        const retryAfter = error.response.headers['retry-after']
          ? parseInt(error.response.headers['retry-after'], 10) * 1000
          : 60000; // M·∫∑c ƒë·ªãnh ch·ªù 60 gi√¢y n·∫øu kh√¥ng c√≥ Retry-After
        console.log(chalk.yellow(`‚ö†Ô∏è L·ªói 429 Too Many Requests. Ch·ªù ${retryAfter / 1000} gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i...`));
        await delay(retryAfter);
        if (attempt === retries) {
          throw new Error(`H·∫øt s·ªë l·∫ßn th·ª≠ (${retries}) - L·ªói 429 Too Many Requests`);
        }
        console.log(chalk.cyan(`üîÑ Ti·∫øp t·ª•c th·ª≠ l·∫°i y√™u c·∫ßu (Th·ª≠ ${attempt}/${retries})...`));
      } else {
        throw error; // N√©m l·ªói n·∫øu kh√¥ng ph·∫£i 502 ho·∫∑c 429
      }
    }
  }
}

// H√†m g·ªçi API l·∫•y danh s√°ch task ƒëi·ªÉm danh h·∫±ng ng√†y
async function getDailyCheckInTasks() {
  try {
    const response = await makeRequestWithRetry({
      method: 'get',
      url: 'https://api2.flow3.tech/api/task/get-user-task-daily',
      headers: {
        Authorization: `Bearer ${accessToken}`,
        accept: 'application/json, text/plain, */*',
        'accept-language': 'vi,fr-FR;q=0.9,fr;q=0.8,en-US;q=0.7,en;q=0.6',
        'sec-ch-ua': '"Chromium";v="134", "Not:A-Brand";v="24", "Google Chrome";v="134"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-site',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36',
        origin: 'https://app.flow3.tech',
        referer: 'https://app.flow3.tech/',
      },
    });

    const tasks = response.data.data;
    console.log(chalk.green('‚úÖ Danh s√°ch task ƒëi·ªÉm danh h·∫±ng ng√†y:'));
    tasks.forEach((task, index) => {
      console.log(chalk.cyan(`Task ${index + 1}:`));
      console.log(`  - T√™n: ${task.name}`);
      console.log(`  - ID: ${task._id}`);
      console.log(`  - Tr·∫°ng th√°i: ${task.status}`);
      console.log(`  - Ph·∫ßn th∆∞·ªüng: ${task.reward || 'Kh√¥ng c√≥ th√¥ng tin'}`);
      console.log('-------------------');
    });

    return tasks;
  } catch (error) {
    console.log(chalk.red('‚ùå L·ªói khi l·∫•y danh s√°ch task ƒëi·ªÉm danh:'), error.message);
    if (error.response) {
      console.log(chalk.red('Ph·∫£n h·ªìi t·ª´ m√°y ch·ªß:'), error.response.data);
    }
    throw error;
  }
}

// H√†m ch√≠nh ƒë·ªÉ ch·∫°y ch∆∞∆°ng tr√¨nh
async function run() {
  if (!accessToken || accessToken === 'YOUR_ACCESS_TOKEN_HERE') {
    console.log(chalk.red('‚ùå Vui l√≤ng thay th·∫ø YOUR_ACCESS_TOKEN_HERE b·∫±ng accessToken c·ªßa b·∫°n!'));
    return;
  }

  console.log(chalk.cyan('üöÄ ƒêang l·∫•y danh s√°ch task ƒëi·ªÉm danh h·∫±ng ng√†y...'));
  try {
    await getDailyCheckInTasks();
  } catch (error) {
    console.log(chalk.red('‚ùå Ch∆∞∆°ng tr√¨nh k·∫øt th√∫c v·ªõi l·ªói.'));
  }
}

// Ch·∫°y ch∆∞∆°ng tr√¨nh
run();